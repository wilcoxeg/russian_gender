mutate(
FPReg = ifelse(gaze_duration==0, NA, FPReg),
FPFix = ifelse(gaze_duration==0, NA, FPFix)) %>%
gather(measure, value, 6:12) %>%
mutate(
value = as.numeric(value),
tgt_zero = if_else(measure %in% c("SFD", "gaze_duration", "go_past_time", "total_duration") & value == 0, F, T)) %>%
filter(tgt_zero != F) %>%
dplyr::select(-tgt_zero, -condition) %>%
mutate(item_id = as.factor(item_id),
subj_id = as.factor(subj_id)) %>%
spread(measure, value) %>%
gather(measure, value, c("SFD", "gaze_duration", "go_past_time", "total_duration")) %>%
mutate(outlier = value > (mean(value, na.rm = TRUE) + 3 * sd(value, na.rm = TRUE))) %>%
filter(outlier == FALSE) %>%
dplyr::select(-outlier) %>%
spread(measure, value) %>%
gather(measure, value, 12:18) %>%
mutate(cond = case_when(
target_gender == "M" & gender_match == "Mis" & type == "stim_adj" ~ "a",
target_gender == "M" & gender_match == "Mis" & type == "stim_verb" ~ "b",
target_gender == "M" & gender_match == "Mis" & type == "stim_pred_adj" ~ "c",
target_gender == "M" & gender_match == "Match" & type == "stim_adj" ~ "d",
target_gender == "M" & gender_match == "Match" & type == "stim_verb" ~ "e",
target_gender == "M" & gender_match == "Match" & type == "stim_pred_adj" ~ "f",
target_gender == "F" & gender_match == "Mis" & type == "stim_adj" ~ "g",
target_gender == "F" & gender_match == "Mis" & type == "stim_verb" ~ "h",
target_gender == "F" & gender_match == "Mis" & type == "stim_pred_adj" ~ "i",
target_gender == "F" & gender_match == "Match" & type == "stim_adj" ~ "j",
target_gender == "F" & gender_match == "Match" & type == "stim_verb" ~ "k",
target_gender == "F" & gender_match == "Match" & type == "stim_pred_adj" ~ "l",
TRUE ~ NA_character_ # This is the default case if none of the above conditions are met
)) %>%
dplyr::select(-list, -part)
View(et)
# The path to the data
data_path <- "./data/"
data_names <- list.files(data_path)
# Read in the data from each participant and add to the data frame
motr_df <- data.frame()
for(name in data_names){
subj <- gsub("reader_", "", gsub("_reading_measures.csv", "", name))
temp_df <- read.csv(paste0(data_path, "/", name)) %>% mutate(subj_id = subj)
motr_df <- rbind(motr_df, temp_df)
}
motr_df <- motr_df %>% mutate(word_len = nchar(word),
word_length = scale(word_len)[,1]) %>%
group_by(subj_id, item_id) %>%
arrange(subj_id, item_id) %>%
mutate(word_len_pre1 = lag(word_length, n = 1),
word_len_pre2 = lag(word_length, n = 2)) %>%
ungroup()
# Clean the data
motr <- motr_df %>%
# filter(subj_id != 171) %>%   # acc = 0.8
filter(! list %in% c(98, 99)) %>% # filter practice and filler items
mutate(skip = ifelse(total_duration==0, 1, 0),
FPReg = ifelse(gaze_duration==0, NA, FPReg),
FPFix = ifelse(gaze_duration==0, NA, FPFix)) %>%
filter(skip == 0) %>%
gather(measure, value, 18:26) %>%
mutate(tgt_zero = if_else(measure %in% c("first_duration", "gaze_duration", "go_past_time", "right_bounded_rt", "total_duration") & value == 0, F, T)) %>%
filter(tgt_zero != F) %>%
dplyr::select(-tgt_zero, -cond_id, -skip, -word_len) %>%
mutate(item_id = as.factor(item_id),
subj_id = as.factor(subj_id)) %>%
spread(measure, value) %>%
gather(measure, value, c("first_duration", "gaze_duration", "go_past_time", "right_bounded_rt", "total_duration")) %>%
mutate(outlier = value > (mean(value, na.rm = TRUE) + 3 * sd(value, na.rm = TRUE))) %>%
filter(outlier == FALSE) %>%
dplyr::select(-outlier) %>%
spread(measure, value) %>%
gather(measure, value, 21:29) %>%
mutate(cond = case_when(
target_gender == "M" & gender_match == "Mis" & type == "stim_adj" ~ "a",
target_gender == "M" & gender_match == "Mis" & type == "stim_verb" ~ "b",
target_gender == "M" & gender_match == "Mis" & type == "stim_pred_adj" ~ "c",
target_gender == "M" & gender_match == "Match" & type == "stim_adj" ~ "d",
target_gender == "M" & gender_match == "Match" & type == "stim_verb" ~ "e",
target_gender == "M" & gender_match == "Match" & type == "stim_pred_adj" ~ "f",
target_gender == "F" & gender_match == "Mis" & type == "stim_adj" ~ "g",
target_gender == "F" & gender_match == "Mis" & type == "stim_verb" ~ "h",
target_gender == "F" & gender_match == "Mis" & type == "stim_pred_adj" ~ "i",
target_gender == "F" & gender_match == "Match" & type == "stim_adj" ~ "j",
target_gender == "F" & gender_match == "Match" & type == "stim_verb" ~ "k",
target_gender == "F" & gender_match == "Match" & type == "stim_pred_adj" ~ "l",
TRUE ~ NA_character_ # This is the default case if none of the above conditions are met
)) %>%
dplyr::select(-list, -part, -type_id, -orig_item_number, -case, -animacy, -response_true, -response_chosen) %>%
mutate(word = str_replace_all(word, "\\.", "")) %>%
rowwise() %>%
mutate(log_freq = ifelse(word %in% et_raw$IA_LABEL,
et_raw$lg_frequency[match(word, et_raw$IA_LABEL)],
NA_real_)) %>%
ungroup()
View(motr)
# check conditions
et$cond <- factor(et$cond)
levels(et$cond)
motr$cond <- factor(motr$cond)
levels(motr$cond)
## sol1
X_H <- matrix(c(1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12, # Intercept
1/6,1/6,1/6,-1/6,-1/6,-1/6,1/6,1/6,1/6,-1/6,-1/6,-1/6, # Main effect of grammaticality
1/6,1/6,1/6,1/6,1/6,1/6,-1/6,-1/6,-1/6,-1/6,-1/6,-1/6, # Main effect of gender
1/8,-1/4,1/8,1/8,-1/4,1/8,1/8,-1/4,1/8,1/8,-1/4,1/8, # Main effect of lexical category
-1/4,1/8,1/8,-1/4,1/8,1/8,-1/4,1/8,1/8,-1/4,1/8,1/8, # Main effect of feature matching
1/6,1/6,1/6,-1/6,-1/6,-1/6,-1/6,-1/6,-1/6,1/6,1/6,1/6, # gram x gen
1/8,-1/4,1/8,-1/8,1/4,-1/8,1/8,-1/4,1/8,-1/8,1/4,-1/8, # gram x lex
-1/4,1/8,1/8,1/4,-1/8,-1/8,-1/4,1/8,1/8,1/4,-1/8,-1/8, # gram x synt
1/8,-1/4,1/8,1/8,-1/4,1/8,-1/8,1/4,-1/8,-1/8,1/4,-1/8, # gen x lex
-1/4,1/8,1/8,-1/4,1/8,1/8,1/4,-1/8,-1/8,1/4,-1/8,-1/8,  #gen x synt
1/4,-1/2,1/4,-1/4,1/2,-1/4,-1/4,1/2,-1/4,1/4,-1/2,1/4, # gram x gen x lex
-1/2,1/4,1/4,1/2,-1/4,-1/4,1/2,-1/4,-1/4,-1/2,1/4,1/4  # gram x gen x synt
), byrow=TRUE, nrow = 12)
# X_H
# rowSums(X_H) # ensure centering
X_C = ginv(X_H)
rownames(X_C) <- c('a','b','c','d','e','f','g','h', 'i', 'j', 'k', 'l')
colnames(X_C) <- c('Int','Gram','Gen','Lex','Synt','Gram_x_Gen','Gram_x_Lex','Gram_x_Synt','Gen_x_Lex','Gen_x_synt','Gram_x_Gen_Lex','Gram_x_Gen_Synt')
X_C_bar <- X_C[,2:ncol(X_C)]
fractions(X_C_bar)
contr_motr <- motr %>%
mutate(
#--------------------- main effects ---------------------
Gram = ifelse(cond %in% c('a', 'b', 'c', 'g', 'h', 'i'), 1/2, -1/2), # Main effect grammaticality
Gen = ifelse(cond %in% c('a','b','c','d','e', 'f'), 1/2, -1/2), # Main effect gender
Lex = ifelse(cond %in% c('a', 'd', 'g', 'j'), 0,
ifelse(cond %in% c('c', 'f', 'i', 'l'), 2/3, -2/3)), # Main effect of lexical category (ap vs v)
Synt = ifelse(cond %in% c('b', 'e', 'h', 'k'), 0,
ifelse(cond %in% c('c', 'f', 'i', 'l'), 2/3, -2/3)), # Main effect of feature matching  (a vs pv)
#--------------------- 2-way interactions ---------------------
Gram_x_Gen = ifelse(cond %in% c('a', 'b', 'c', 'j', 'k', 'l'), 1/2, -1/2), # Grammaticality x Gender
Gram_x_Lex = ifelse(cond %in% c('a', 'd', 'g', 'j'), 0,
ifelse(cond %in% c('c', 'e', 'i', 'k'), 2/3, -2/3)), # Grammaticality x Lexical Category
Gram_x_Synt = ifelse(cond %in% c('b', 'e', 'h', 'k'), 0,
ifelse(cond %in% c('c', 'd', 'i', 'j'), 2/3, -2/3)), # Grammaticality x Feature matching
Gen_x_Lex = ifelse(cond %in% c('a', 'd', 'g', 'j'), 0,
ifelse(cond %in% c('c', 'f', 'h', 'k'), 2/3, -2/3)), # Gender x Lexical category
Gen_x_Synt = ifelse(cond %in% c('b', 'e', 'h', 'k'), 0,
ifelse(cond %in% c('c', 'f', 'g', 'j'), 2/3, -2/3)), # Gender x Feature matching
#--------------------- 3 way interection ---------------------
Gram_x_Gen_x_Lex = ifelse(cond %in% c('a', 'd', 'g', 'j'), 0,
ifelse(cond %in% c('c', 'e', 'h', 'l'), 1/3, -1/3)),# gen x lex(ap v) x gram
Gram_x_Gen_x_Synt = ifelse(cond %in% c('b', 'e', 'h', 'k'), 0,
ifelse(cond %in% c('c', 'd', 'g', 'l'), 1/3, -1/3)) # gen x synt(ap v) x gram
) %>% spread(measure, value) #%>%
# # filter(word_nr == 3)
# filter(AOI_id == "R3")
contr_motr
createStanData <-function(d, dv,form){
subj <- as.integer(factor(d$subj_id))
N_subj <- length(unique(subj))
item <- as.integer(factor(d$item_id))
N_items <- length(unique(item))
X <- unname(model.matrix(form, d))
attr(X, which="assign") <- NULL
stanData <- list(N = nrow(X),
P = ncol(X),
n_u = ncol(X),
n_w = ncol(X),
X = X,
Z_u = X,
Z_w = X,
J = N_subj,
K = N_items,
dv = dv,
subj = subj,
item = item)
stanData
}
# regions <- c("R2", "R3", "R4", "R5")
regions <- c("R3")
measure_types <- c("gaze_duration", "go_past_time", "total_duration", "FPReg", "RegIn_incl")
for (region in regions) {
for (meas in measure_types) {
print(paste("Fitting Bayesian model for:", meas, "in Region:", region))
# Filter data for current region and non-missing measure
temp <- contr_motr %>%
filter(AOI_id == region) %>%
filter(!is.na(.data[[meas]]))
# binary dv
if (meas == "FPReg") {
stan_data <- createStanData(
d = temp,
form = as.formula("~1 + Gram + Gen + Lex + Synt +
Gram_x_Lex + Gram_x_Synt + Gram_x_Gen_x_Lex + Gram_x_Gen_x_Synt"),
dv = temp[[meas]]
)
} else {
# For other measures, use the default formulas and models
stan_data <- createStanData(
d = temp,
form = as.formula("~1 + Gram + Gen + Lex + Synt +
Gram_x_Synt + Gram_x_Gen_x_Lex + Gram_x_Gen_x_Synt"),
dv = temp[[meas]]
)
stan_model_file <- ifelse(meas %in% c("first_duration", "gaze_duration", "go_past_time", "total_duration"), "stan/Model_RT.stan", "stan/Model_binary.stan")
}
# Fit model
stan_model <- stan(
file = stan_model_file,
data = stan_data,
iter = 4000,
chains = 4,
control = list(adapt_delta = 0.99)
)
# Save model output
model_save_path <- paste0("models2/m1_", meas, "_", region, ".rds")
saveRDS(stan_model, file = model_save_path)
}
}
# The path to the data
data_path <- "./data/"
data_names <- list.files(data_path)
# Read in the data from each participant and add to the data frame
motr_df <- data.frame()
for(name in data_names){
subj <- gsub("reader_", "", gsub("_reading_measures.csv", "", name))
temp_df <- read.csv(paste0(data_path, "/", name)) %>% mutate(subj_id = subj)
motr_df <- rbind(motr_df, temp_df)
}
motr_df <- motr_df %>% mutate(word_len = nchar(word),
word_length = scale(word_len)[,1]) %>%
group_by(subj_id, item_id) %>%
arrange(subj_id, item_id) %>%
mutate(word_len_pre1 = lag(word_length, n = 1),
word_len_pre2 = lag(word_length, n = 2)) %>%
ungroup()
# Clean the data
motr <- motr_df %>%
# filter(subj_id != 171) %>%   # acc = 0.8
filter(! list %in% c(98, 99)) %>% # filter practice and filler items
mutate(skip = ifelse(total_duration==0, 1, 0),
FPReg = ifelse(gaze_duration==0, NA, FPReg),
FPFix = ifelse(gaze_duration==0, NA, FPFix)) %>%
filter(skip == 0) %>%
gather(measure, value, 18:26) %>%
mutate(tgt_zero = if_else(measure %in% c("first_duration", "gaze_duration", "go_past_time", "right_bounded_rt", "total_duration") & value == 0, F, T)) %>%
filter(tgt_zero != F) %>%
dplyr::select(-tgt_zero, -cond_id, -skip, -word_len) %>%
mutate(item_id = as.factor(item_id),
subj_id = as.factor(subj_id)) %>%
spread(measure, value) %>%
gather(measure, value, c("first_duration", "gaze_duration", "go_past_time", "right_bounded_rt", "total_duration")) %>%
mutate(outlier = value > (mean(value, na.rm = TRUE) + 3 * sd(value, na.rm = TRUE))) %>%
filter(outlier == FALSE) %>%
dplyr::select(-outlier) %>%
spread(measure, value) %>%
gather(measure, value, 21:29) %>%
mutate(cond = case_when(
target_gender == "M" & gender_match == "Mis" & type == "stim_adj" ~ "a",
target_gender == "M" & gender_match == "Mis" & type == "stim_verb" ~ "b",
target_gender == "M" & gender_match == "Mis" & type == "stim_pred_adj" ~ "c",
target_gender == "M" & gender_match == "Match" & type == "stim_adj" ~ "d",
target_gender == "M" & gender_match == "Match" & type == "stim_verb" ~ "e",
target_gender == "M" & gender_match == "Match" & type == "stim_pred_adj" ~ "f",
target_gender == "F" & gender_match == "Mis" & type == "stim_adj" ~ "g",
target_gender == "F" & gender_match == "Mis" & type == "stim_verb" ~ "h",
target_gender == "F" & gender_match == "Mis" & type == "stim_pred_adj" ~ "i",
target_gender == "F" & gender_match == "Match" & type == "stim_adj" ~ "j",
target_gender == "F" & gender_match == "Match" & type == "stim_verb" ~ "k",
target_gender == "F" & gender_match == "Match" & type == "stim_pred_adj" ~ "l",
TRUE ~ NA_character_ # This is the default case if none of the above conditions are met
)) %>%
dplyr::select(-list, -part, -type_id, -orig_item_number, -case, -animacy, -response_true, -response_chosen) %>%
mutate(word = str_replace_all(word, "\\.", "")) %>%
rowwise() %>%
mutate(log_freq = ifelse(word %in% et_raw$IA_LABEL,
et_raw$lg_frequency[match(word, et_raw$IA_LABEL)],
NA_real_)) %>%
ungroup()
View(motr)
# check conditions
et$cond <- factor(et$cond)
levels(et$cond)
motr$cond <- factor(motr$cond)
levels(motr$cond)
## sol1
X_H <- matrix(c(1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12,1/12, # Intercept
1/6,1/6,1/6,-1/6,-1/6,-1/6,1/6,1/6,1/6,-1/6,-1/6,-1/6, # Main effect of grammaticality
1/6,1/6,1/6,1/6,1/6,1/6,-1/6,-1/6,-1/6,-1/6,-1/6,-1/6, # Main effect of gender
1/8,-1/4,1/8,1/8,-1/4,1/8,1/8,-1/4,1/8,1/8,-1/4,1/8, # Main effect of lexical category
-1/4,1/8,1/8,-1/4,1/8,1/8,-1/4,1/8,1/8,-1/4,1/8,1/8, # Main effect of feature matching
1/6,1/6,1/6,-1/6,-1/6,-1/6,-1/6,-1/6,-1/6,1/6,1/6,1/6, # gram x gen
1/8,-1/4,1/8,-1/8,1/4,-1/8,1/8,-1/4,1/8,-1/8,1/4,-1/8, # gram x lex
-1/4,1/8,1/8,1/4,-1/8,-1/8,-1/4,1/8,1/8,1/4,-1/8,-1/8, # gram x synt
1/8,-1/4,1/8,1/8,-1/4,1/8,-1/8,1/4,-1/8,-1/8,1/4,-1/8, # gen x lex
-1/4,1/8,1/8,-1/4,1/8,1/8,1/4,-1/8,-1/8,1/4,-1/8,-1/8,  #gen x synt
1/4,-1/2,1/4,-1/4,1/2,-1/4,-1/4,1/2,-1/4,1/4,-1/2,1/4, # gram x gen x lex
-1/2,1/4,1/4,1/2,-1/4,-1/4,1/2,-1/4,-1/4,-1/2,1/4,1/4  # gram x gen x synt
), byrow=TRUE, nrow = 12)
# X_H
# rowSums(X_H) # ensure centering
X_C = ginv(X_H)
rownames(X_C) <- c('a','b','c','d','e','f','g','h', 'i', 'j', 'k', 'l')
colnames(X_C) <- c('Int','Gram','Gen','Lex','Synt','Gram_x_Gen','Gram_x_Lex','Gram_x_Synt','Gen_x_Lex','Gen_x_synt','Gram_x_Gen_Lex','Gram_x_Gen_Synt')
X_C_bar <- X_C[,2:ncol(X_C)]
fractions(X_C_bar)
contr_motr <- motr %>%
mutate(
#--------------------- main effects ---------------------
Gram = ifelse(cond %in% c('a', 'b', 'c', 'g', 'h', 'i'), 1/2, -1/2), # Main effect grammaticality
Gen = ifelse(cond %in% c('a','b','c','d','e', 'f'), 1/2, -1/2), # Main effect gender
Lex = ifelse(cond %in% c('a', 'd', 'g', 'j'), 0,
ifelse(cond %in% c('c', 'f', 'i', 'l'), 2/3, -2/3)), # Main effect of lexical category (ap vs v)
Synt = ifelse(cond %in% c('b', 'e', 'h', 'k'), 0,
ifelse(cond %in% c('c', 'f', 'i', 'l'), 2/3, -2/3)), # Main effect of feature matching  (a vs pv)
#--------------------- 2-way interactions ---------------------
Gram_x_Gen = ifelse(cond %in% c('a', 'b', 'c', 'j', 'k', 'l'), 1/2, -1/2), # Grammaticality x Gender
Gram_x_Lex = ifelse(cond %in% c('a', 'd', 'g', 'j'), 0,
ifelse(cond %in% c('c', 'e', 'i', 'k'), 2/3, -2/3)), # Grammaticality x Lexical Category
Gram_x_Synt = ifelse(cond %in% c('b', 'e', 'h', 'k'), 0,
ifelse(cond %in% c('c', 'd', 'i', 'j'), 2/3, -2/3)), # Grammaticality x Feature matching
Gen_x_Lex = ifelse(cond %in% c('a', 'd', 'g', 'j'), 0,
ifelse(cond %in% c('c', 'f', 'h', 'k'), 2/3, -2/3)), # Gender x Lexical category
Gen_x_Synt = ifelse(cond %in% c('b', 'e', 'h', 'k'), 0,
ifelse(cond %in% c('c', 'f', 'g', 'j'), 2/3, -2/3)), # Gender x Feature matching
#--------------------- 3 way interection ---------------------
Gram_x_Gen_x_Lex = ifelse(cond %in% c('a', 'd', 'g', 'j'), 0,
ifelse(cond %in% c('c', 'e', 'h', 'l'), 1/3, -1/3)),# gen x lex(ap v) x gram
Gram_x_Gen_x_Synt = ifelse(cond %in% c('b', 'e', 'h', 'k'), 0,
ifelse(cond %in% c('c', 'd', 'g', 'l'), 1/3, -1/3)) # gen x synt(ap v) x gram
) %>% spread(measure, value) #%>%
# # filter(word_nr == 3)
# filter(AOI_id == "R3")
contr_motr
createStanData <-function(d, dv,form){
subj <- as.integer(factor(d$subj_id))
N_subj <- length(unique(subj))
item <- as.integer(factor(d$item_id))
N_items <- length(unique(item))
X <- unname(model.matrix(form, d))
attr(X, which="assign") <- NULL
stanData <- list(N = nrow(X),
P = ncol(X),
n_u = ncol(X),
n_w = ncol(X),
X = X,
Z_u = X,
Z_w = X,
J = N_subj,
K = N_items,
dv = dv,
subj = subj,
item = item)
stanData
}
# regions <- c("R2", "R3", "R4", "R5")
regions <- c("R3")
measure_types <- c("gaze_duration", "go_past_time", "total_duration", "FPReg", "RegIn_incl")
for (region in regions) {
for (meas in measure_types) {
print(paste("Fitting Bayesian model for:", meas, "in Region:", region))
# Filter data for current region and non-missing measure
temp <- contr_motr %>%
filter(AOI_id == region) %>%
filter(!is.na(.data[[meas]]))
# binary dv
if (meas == "FPReg") {
stan_data <- createStanData(
d = temp,
form = as.formula("~1 + Gram + Gen + Lex + Synt +
Gram_x_Lex + Gram_x_Synt + Gram_x_Gen_x_Lex + Gram_x_Gen_x_Synt"),
dv = temp[[meas]]
)
} else {
# For other measures, use the default formulas and models
stan_data <- createStanData(
d = temp,
form = as.formula("~1 + Gram + Gen + Lex + Synt +
Gram_x_Synt + Gram_x_Gen_x_Lex + Gram_x_Gen_x_Synt"),
dv = temp[[meas]]
)
stan_model_file <- ifelse(meas %in% c("first_duration", "gaze_duration", "go_past_time", "total_duration"), "stan/Model_RT.stan", "stan/Model_binary.stan")
}
# Fit model
stan_model <- stan(
file = stan_model_file,
data = stan_data,
iter = 4000,
chains = 4,
control = list(adapt_delta = 0.99)
)
# Save model output
model_save_path <- paste0("models2/m1_", meas, "_", region, ".rds")
saveRDS(stan_model, file = model_save_path)
}
}
# regions <- c("R2", "R3", "R4", "R5")
regions <- c("R3")
measure_types <- c("gaze_duration", "go_past_time", "total_duration", "FPReg", "RegIn_incl")
for (region in regions) {
for (meas in measure_types) {
print(paste("Fitting Bayesian model for:", meas, "in Region:", region))
# Filter data for current region and non-missing measure
temp <- contr_motr %>%
filter(AOI_id == region) %>%
filter(!is.na(.data[[meas]]))
# binary dv
if (meas == "FPReg") {
stan_data <- createStanData(
d = temp,
form = as.formula("~1 + Gram + Gen + Lex + Synt +
Gram_x_Lex + Gram_x_Synt + Gram_x_Gen_x_Lex + Gram_x_Gen_x_Synt"),
dv = temp[[meas]]
)
} else {
# For other measures, use the default formulas and models
stan_data <- createStanData(
d = temp,
form = as.formula("~1 + Gram + Gen + Lex + Synt + Gram_x_Lex
Gram_x_Synt + Gram_x_Gen_x_Lex + Gram_x_Gen_x_Synt"),
dv = temp[[meas]]
)
stan_model_file <- ifelse(meas %in% c("first_duration", "gaze_duration", "go_past_time", "total_duration"), "stan/Model_RT.stan", "stan/Model_binary.stan")
}
# Fit model
stan_model <- stan(
file = stan_model_file,
data = stan_data,
iter = 4000,
chains = 4,
control = list(adapt_delta = 0.99)
)
# Save model output
model_save_path <- paste0("models2/m1_", meas, "_", region, ".rds")
saveRDS(stan_model, file = model_save_path)
}
}
# regions <- c("R2", "R3", "R4", "R5")
regions <- c("R3")
measure_types <- c("gaze_duration", "go_past_time", "total_duration", "FPReg", "RegIn_incl")
for (region in regions) {
for (meas in measure_types) {
print(paste("Fitting Bayesian model for:", meas, "in Region:", region))
# Filter data for current region and non-missing measure
temp <- contr_motr %>%
filter(AOI_id == region) %>%
filter(!is.na(.data[[meas]]))
# binary dv
if (meas == "FPReg") {
stan_data <- createStanData(
d = temp,
form = as.formula("~1 + Gram + Gen + Lex + Synt +
Gram_x_Lex + Gram_x_Synt + Gram_x_Gen_x_Lex + Gram_x_Gen_x_Synt"),
dv = temp[[meas]]
)
} else {
# For other measures, use the default formulas and models
stan_data <- createStanData(
d = temp,
form = as.formula("~1 + Gram + Gen + Lex + Synt + Gram_x_Lex
Gram_x_Synt + Gram_x_Gen_x_Lex + Gram_x_Gen_x_Synt"),
dv = temp[[meas]]
)
stan_model_file <- ifelse(meas %in% c("first_duration", "gaze_duration", "go_past_time", "total_duration"), "stan/Model_RT.stan", "stan/Model_binary.stan")
}
# Fit model
stan_model <- stan(
file = stan_model_file,
data = stan_data,
iter = 4000,
chains = 4,
control = list(adapt_delta = 0.99)
)
# Save model output
model_save_path <- paste0("models2/m1_", meas, "_", region, ".rds")
saveRDS(stan_model, file = model_save_path)
}
}
# regions <- c("R2", "R3", "R4", "R5")
regions <- c("R3")
measure_types <- c("gaze_duration", "go_past_time", "total_duration", "FPReg", "RegIn_incl")
for (region in regions) {
for (meas in measure_types) {
print(paste("Fitting Bayesian model for:", meas, "in Region:", region))
# Filter data for current region and non-missing measure
temp <- contr_motr %>%
filter(AOI_id == region) %>%
filter(!is.na(.data[[meas]]))
# binary dv
if (meas == "FPReg") {
stan_data <- createStanData(
d = temp,
form = as.formula("~1 + Gram + Gen + Lex + Synt +
Gram_x_Lex + Gram_x_Synt + Gram_x_Gen_x_Lex + Gram_x_Gen_x_Synt"),
dv = temp[[meas]]
)
} else {
# For other measures, use the default formulas and models
stan_data <- createStanData(
d = temp,
form = as.formula("~1 + Gram + Gen + Lex + Synt + Gram_x_Lex +
Gram_x_Synt + Gram_x_Gen_x_Lex + Gram_x_Gen_x_Synt"),
dv = temp[[meas]]
)
stan_model_file <- ifelse(meas %in% c("first_duration", "gaze_duration", "go_past_time", "total_duration"), "stan/Model_RT.stan", "stan/Model_binary.stan")
}
# Fit model
stan_model <- stan(
file = stan_model_file,
data = stan_data,
iter = 4000,
chains = 4,
control = list(adapt_delta = 0.99)
)
# Save model output
model_save_path <- paste0("models2/m1_", meas, "_", region, ".rds")
saveRDS(stan_model, file = model_save_path)
}
}

# mutate(cond = case_when(
#   target_gender == "M" & gender_match == "Mis" & type == "stim_adj" ~ "a",
#   target_gender == "M" & gender_match == "Mis" & type == "stim_verb" ~ "b",
#    target_gender == "M" & gender_match == "Mis" & type == "stim_pred_adj" ~ "c",
#   target_gender == "M" & gender_match == "Match" & type == "stim_adj" ~ "d",
#   target_gender == "M" & gender_match == "Match" & type == "stim_verb" ~ "e",
#   target_gender == "M" & gender_match == "Match" & type == "stim_pred_adj" ~ "f",
#   target_gender == "F" & gender_match == "Mis" & type == "stim_adj" ~ "g",
#   target_gender == "F" & gender_match == "Mis" & type == "stim_verb" ~ "h",
#   target_gender == "F" & gender_match == "Mis" & type == "stim_pred_adj" ~ "i",
#   target_gender == "F" & gender_match == "Match" & type == "stim_adj" ~ "j",
#   target_gender == "F" & gender_match == "Match" & type == "stim_verb" ~ "k",
#   target_gender == "F" & gender_match == "Match" & type == "stim_pred_adj" ~ "l",
#   TRUE ~ NA_character_ # This is the default case if none of the above conditions are met
# )) %>%
dplyr::select(-list, -part, -type_id, -orig_item_number, -case, -animacy, -response_true, -response_chosen) %>%
mutate(word = str_replace_all(word, "\\.", "")) %>%
rowwise() %>%
mutate(log_freq = ifelse(word %in% et_raw$IA_LABEL,
et_raw$lg_frequency[match(word, et_raw$IA_LABEL)],
NA_real_)) %>%
ungroup()
View(motr)
select_meas <- c("SFD", "total_duration", "gaze_duration", "FPFix", "go_past_time", "FPReg", "RegIn")
et <- et_raw %>%
dplyr::select(IA_LABEL, item, word.id, list, RECORDING_SESSION_LABEL, SFD, IA_DWELL_TIME, IA_FIRST_RUN_DWELL_TIME, IA_FIRST_FIX_PROGRESSIVE, IA_SELECTIVE_REGRESSION_PATH_DURATION, IA_REGRESSION_OUT, IA_REGRESSION_IN, gender_match, part, target_gender, type, Region, condition, ACCURACY, animacy) %>%
rename(
word = IA_LABEL,
item_id = item,
word_nr = word.id,
subj_id = RECORDING_SESSION_LABEL,
total_duration = IA_DWELL_TIME,
gaze_duration = IA_FIRST_RUN_DWELL_TIME,
first_pass_fix = IA_FIRST_FIX_PROGRESSIVE,
go_past_time = IA_SELECTIVE_REGRESSION_PATH_DURATION,
FPReg = IA_REGRESSION_OUT,
RegIn = IA_REGRESSION_IN,
AOI_id = Region
) %>%
filter(subj_id != "russ34") %>%  # russ34 has acc 0.6 according to the calculation below.
mutate(
go_past_time = as.numeric(go_past_time),
SFD = if_else(first_pass_fix == 1, SFD, 0),
gaze_duration = if_else(first_pass_fix == 1, gaze_duration, 0),
go_past_time = if_else(first_pass_fix == 1,  go_past_time, 0),
) %>%
rename(FPFix = first_pass_fix) %>%
mutate(
FPReg = ifelse(gaze_duration==0, NA, FPReg),
FPFix = ifelse(gaze_duration==0, NA, FPFix)) %>%
gather(measure, value, select_meas) %>%
mutate(
value = as.numeric(value),
tgt_zero = if_else(measure %in% c("SFD", "gaze_duration", "go_past_time", "total_duration") & value == 0, F, T)) %>%
filter(tgt_zero != F) %>%
dplyr::select(-tgt_zero, -condition) %>%
mutate(item_id = as.factor(item_id),
subj_id = as.factor(subj_id)) %>%
spread(measure, value) %>%
# Note: we commented these lines out when running models because we logged the data and used mix effects to account for the variances and noises. If also filter outliers when running models, the results will not change qualitatively, but the estimated CI (or CrI) will be a bit narrower.
# We filter outliers only for aesthetic reasons in plotting.
gather(measure, value, c("SFD", "gaze_duration", "go_past_time", "total_duration")) %>%
mutate(outlier = value > (mean(value, na.rm = TRUE) + 3 * sd(value, na.rm = TRUE))) %>%
filter(outlier == FALSE) %>%
dplyr::select(-outlier) %>%
spread(measure, value) %>%
# filter(animacy %in% c("Inanim", "inanim")) %>%
dplyr::select(-list, -part, -animacy)
et
View(et)
# The path to the data
data_path <- "./data/"
data_names <- list.files(data_path)
# Read in the data from each participant and add to the data frame
motr_df <- data.frame()
for(name in data_names){
subj <- gsub("reader_", "", gsub("_reading_measures.csv", "", name))
temp_df <- read.csv(paste0(data_path, "/", name)) %>% mutate(subj_id = subj)
motr_df <- rbind(motr_df, temp_df)
}
motr_df <- motr_df %>% mutate(word_len = nchar(word),
word_length = scale(word_len)[,1]) %>%
group_by(subj_id, item_id) %>%
arrange(subj_id, item_id) %>%
mutate(word_len_pre1 = lag(word_length, n = 1),
word_len_pre2 = lag(word_length, n = 2)) %>%
ungroup()
# Clean the data
motr <- motr_df %>%
# filter(subj_id != 171) %>%   # acc = 0.8
filter(! list %in% c(98, 99)) %>% # filter practice and filler items
mutate(skip = ifelse(total_duration==0, 1, 0),
FPReg = ifelse(gaze_duration==0, NA, FPReg),
FPFix = ifelse(gaze_duration==0, NA, FPFix)) %>%
filter(skip == 0) %>%
gather(measure, value, 18:26) %>%
mutate(tgt_zero = if_else(measure %in% c("first_duration", "gaze_duration", "go_past_time", "right_bounded_rt", "total_duration") & value == 0, F, T)) %>%
filter(tgt_zero != F) %>%
dplyr::select(-tgt_zero, -cond_id, -skip, -word_len) %>%
mutate(item_id = as.factor(item_id),
subj_id = as.factor(subj_id)) %>%
spread(measure, value) %>%
# Note: we commented these lines out when running models because we logged the data and used mix effects to account for the variances and noises. If also filter outliers when running models, the results will not change qualitatively, but the estimated CI (or CrI) will be a bit narrower.
# We filter outliers only for aesthetic reasons in plotting.
gather(measure, value, c("first_duration", "gaze_duration", "go_past_time", "right_bounded_rt", "total_duration")) %>%
mutate(outlier = value > (mean(value, na.rm = TRUE) + 3 * sd(value, na.rm = TRUE))) %>%
filter(outlier == FALSE) %>%
dplyr::select(-outlier) %>%
spread(measure, value) %>%
dplyr::select(-list, -part, -type_id, -orig_item_number, -case, -animacy, -response_true, -response_chosen) %>%
mutate(word = str_replace_all(word, "\\.", "")) %>%
rowwise() %>%
mutate(log_freq = ifelse(word %in% et_raw$IA_LABEL,
et_raw$lg_frequency[match(word, et_raw$IA_LABEL)],
NA_real_)) %>%
ungroup()
View(motr)
motr_acc <- motr %>% dplyr::select(item_id, subj_id, correctness) %>%
filter(correctness != 99) %>%
distinct()
motr_acc_summary <- motr_acc %>%
group_by(subj_id) %>%
summarise(mean_correctness = mean(correctness),
sd_correctness = sd(correctness),
count = n())
motr_acc_summary
View(motr_acc_summary)
write.csv(motr_acc_summary, "./stats/motr_correctness_summary.csv", row.names = FALSE)
et_acc <- et %>% dplyr::select(all_of(c("item_id", "subj_id", "cond", "ACCURACY"))) %>%
# filter(ACCURACY != -1) %>%
distinct() %>%
mutate(correctness = as.numeric(unlist(ACCURACY)))
et_acc <- et %>% dplyr::select(all_of(c("item_id", "subj_id", "ACCURACY"))) %>%
# filter(ACCURACY != -1) %>%
distinct() %>%
mutate(correctness = as.numeric(unlist(ACCURACY)))
et_acc_summary <- et_acc %>%
group_by(subj_id) %>%
summarise(mean_correctness = mean(correctness),
sd_correctness = sd(correctness),
count = n())
View(et_acc_summary)
motr_acc <- motr %>% dplyr::select(item_id, subj_id, correctness) %>%
# filter(correctness != 99) %>%
distinct()
motr_acc_summary <- motr_acc %>%
group_by(subj_id) %>%
summarise(mean_correctness = mean(correctness),
sd_correctness = sd(correctness),
count = n())
motr_acc <- motr %>% dplyr::select(item_id, subj_id, correctness) %>%
filter(correctness != 99) %>%
distinct()
motr_acc_summary <- motr_acc %>%
group_by(subj_id) %>%
summarise(mean_correctness = mean(correctness),
sd_correctness = sd(correctness),
count = n())
et_acc <- et %>% dplyr::select(all_of(c("item_id", "subj_id", "ACCURACY"))) %>%
# filter(ACCURACY != -1) %>%
distinct() %>%
mutate(correctness = as.numeric(unlist(ACCURACY)))
et_acc_summary <- et_acc %>%
group_by(subj_id) %>%
summarise(mean_correctness = mean(correctness),
sd_correctness = sd(correctness),
count = n())
et_acc <- et %>% dplyr::select(all_of(c("item_id", "subj_id", "ACCURACY"))) %>%
filter(ACCURACY != -1) %>%
distinct() %>%
mutate(correctness = as.numeric(unlist(ACCURACY)))
et_acc_summary <- et_acc %>%
group_by(subj_id) %>%
summarise(mean_correctness = mean(correctness),
sd_correctness = sd(correctness),
count = n())
View(et_acc_summary)
select_meas <- c("SFD", "total_duration", "gaze_duration", "FPFix", "go_past_time", "FPReg", "RegIn")
et <- et_raw %>%
dplyr::select(IA_LABEL, item, word.id, list, RECORDING_SESSION_LABEL, SFD, IA_DWELL_TIME, IA_FIRST_RUN_DWELL_TIME, IA_FIRST_FIX_PROGRESSIVE, IA_SELECTIVE_REGRESSION_PATH_DURATION, IA_REGRESSION_OUT, IA_REGRESSION_IN, gender_match, part, target_gender, type, Region, condition, ACCURACY, animacy) %>%
rename(
word = IA_LABEL,
item_id = item,
word_nr = word.id,
subj_id = RECORDING_SESSION_LABEL,
total_duration = IA_DWELL_TIME,
gaze_duration = IA_FIRST_RUN_DWELL_TIME,
first_pass_fix = IA_FIRST_FIX_PROGRESSIVE,
go_past_time = IA_SELECTIVE_REGRESSION_PATH_DURATION,
FPReg = IA_REGRESSION_OUT,
RegIn = IA_REGRESSION_IN,
AOI_id = Region
) %>%
# filter(subj_id != "russ34") %>%  # russ34 has acc 0.6 according to the calculation below.
mutate(
go_past_time = as.numeric(go_past_time),
SFD = if_else(first_pass_fix == 1, SFD, 0),
gaze_duration = if_else(first_pass_fix == 1, gaze_duration, 0),
go_past_time = if_else(first_pass_fix == 1,  go_past_time, 0),
) %>%
rename(FPFix = first_pass_fix) %>%
mutate(
FPReg = ifelse(gaze_duration==0, NA, FPReg),
FPFix = ifelse(gaze_duration==0, NA, FPFix)) %>%
gather(measure, value, select_meas) %>%
mutate(
value = as.numeric(value),
tgt_zero = if_else(measure %in% c("SFD", "gaze_duration", "go_past_time", "total_duration") & value == 0, F, T)) %>%
filter(tgt_zero != F) %>%
dplyr::select(-tgt_zero, -condition) %>%
mutate(item_id = as.factor(item_id),
subj_id = as.factor(subj_id)) %>%
spread(measure, value) %>%
# Note: we commented these lines out when running models because we logged the data and used mix effects to account for the variances and noises. If also filter outliers when running models, the results will not change qualitatively, but the estimated CI (or CrI) will be a bit narrower.
# We filter outliers only for aesthetic reasons in plotting.
gather(measure, value, c("SFD", "gaze_duration", "go_past_time", "total_duration")) %>%
mutate(outlier = value > (mean(value, na.rm = TRUE) + 3 * sd(value, na.rm = TRUE))) %>%
filter(outlier == FALSE) %>%
dplyr::select(-outlier) %>%
spread(measure, value) %>%
# filter(animacy %in% c("Inanim", "inanim")) %>%
dplyr::select(-list, -part, -animacy)
et
et_acc <- et %>% dplyr::select(all_of(c("item_id", "subj_id", "ACCURACY"))) %>%
filter(ACCURACY != -1) %>%
distinct() %>%
mutate(correctness = as.numeric(unlist(ACCURACY)))
et_acc_summary <- et_acc %>%
group_by(subj_id) %>%
summarise(mean_correctness = mean(correctness),
sd_correctness = sd(correctness),
count = n())
View(et_acc_summary)
knitr::opts_chunk$set(echo = TRUE)
shhh <- suppressPackageStartupMessages # It's a library, so shhh!
shhh(library( mgcv ))
shhh(library(dplyr))
shhh(library(ggplot2))
shhh(library(lme4))
shhh(library(tidymv))
shhh(library(gamlss))
shhh(library(gsubfn))
shhh(library(lmerTest))
shhh(library(tidyverse))
shhh(library(boot))
shhh(library(rsample))
shhh(library(plotrix))
shhh(library(ggrepel))
shhh(library(mgcv))
shhh(library(brms))
shhh(library(bayesplot))
shhh(library(tidyr))
shhh(library(car))
shhh(library(HDInterval))
shhh(library(gridExtra))
shhh(library(posterior))
shhh(library(readxl))
shhh(library(stringr))
shhh(library(loo))
shhh(library(MASS))
shhh(library(hypr))
shhh(library(designr))
shhh(library(afex))
shhh(library(coda))
shhh(library(rstan))
shhh(library(rstantools))
rstan_options(auto_write=TRUE)
options(mc.cores=parallel::detectCores())
rstan_options(auto_write = TRUE)
theme_set(theme_bw())
options(digits=4)
options(scipen=999)
set.seed(444)
file_list <- list.files("/Users/cui/Documents/uzh/PhD/Projects/Russian_Agreement/russian_gender/ref/Eyetracking/", pattern = "*.xlsx", full.names = TRUE)
et_raw <- file_list %>%
lapply(read_excel) %>%
bind_rows()
select_meas <- c("SFD", "total_duration", "gaze_duration", "FPFix", "go_past_time", "FPReg", "RegIn")
et <- et_raw %>%
dplyr::select(IA_LABEL, item, word.id, list, RECORDING_SESSION_LABEL, SFD, IA_DWELL_TIME, IA_FIRST_RUN_DWELL_TIME, IA_FIRST_FIX_PROGRESSIVE, IA_SELECTIVE_REGRESSION_PATH_DURATION, IA_REGRESSION_OUT, IA_REGRESSION_IN, gender_match, part, target_gender, type, Region, condition, ACCURACY, animacy) %>%
rename(
word = IA_LABEL,
item_id = item,
word_nr = word.id,
subj_id = RECORDING_SESSION_LABEL,
total_duration = IA_DWELL_TIME,
gaze_duration = IA_FIRST_RUN_DWELL_TIME,
first_pass_fix = IA_FIRST_FIX_PROGRESSIVE,
go_past_time = IA_SELECTIVE_REGRESSION_PATH_DURATION,
FPReg = IA_REGRESSION_OUT,
RegIn = IA_REGRESSION_IN,
AOI_id = Region
) %>%
filter(subj_id != "russ34") %>%  # russ34 has acc 0.6 according to the calculation below.
mutate(
go_past_time = as.numeric(go_past_time),
SFD = if_else(first_pass_fix == 1, SFD, 0),
gaze_duration = if_else(first_pass_fix == 1, gaze_duration, 0),
go_past_time = if_else(first_pass_fix == 1,  go_past_time, 0),
) %>%
rename(FPFix = first_pass_fix) %>%
mutate(
FPReg = ifelse(gaze_duration==0, NA, FPReg),
FPFix = ifelse(gaze_duration==0, NA, FPFix)) %>%
gather(measure, value, select_meas) %>%
mutate(
value = as.numeric(value),
tgt_zero = if_else(measure %in% c("SFD", "gaze_duration", "go_past_time", "total_duration") & value == 0, F, T)) %>%
filter(tgt_zero != F) %>%
dplyr::select(-tgt_zero, -condition) %>%
mutate(item_id = as.factor(item_id),
subj_id = as.factor(subj_id)) %>%
spread(measure, value) %>%
# Note: we commented these lines out when running models because we logged the data and used mix effects to account for the variances and noises. If also filter outliers when running models, the results will not change qualitatively, but the estimated CI (or CrI) will be a bit narrower.
# We filter outliers only for aesthetic reasons in plotting.
gather(measure, value, c("SFD", "gaze_duration", "go_past_time", "total_duration")) %>%
mutate(outlier = value > (mean(value, na.rm = TRUE) + 3 * sd(value, na.rm = TRUE))) %>%
filter(outlier == FALSE) %>%
dplyr::select(-outlier) %>%
spread(measure, value) %>%
# filter(animacy %in% c("Inanim", "inanim")) %>%
dplyr::select(-list, -part, -animacy)
et
# The path to the data
data_path <- "./data/"
data_names <- list.files(data_path)
# Read in the data from each participant and add to the data frame
motr_df <- data.frame()
for(name in data_names){
subj <- gsub("reader_", "", gsub("_reading_measures.csv", "", name))
temp_df <- read.csv(paste0(data_path, "/", name)) %>% mutate(subj_id = subj)
motr_df <- rbind(motr_df, temp_df)
}
motr_df <- motr_df %>% mutate(word_len = nchar(word),
word_length = scale(word_len)[,1]) %>%
group_by(subj_id, item_id) %>%
arrange(subj_id, item_id) %>%
mutate(word_len_pre1 = lag(word_length, n = 1),
word_len_pre2 = lag(word_length, n = 2)) %>%
ungroup()
# Clean the data
motr <- motr_df %>%
# filter(subj_id != 171) %>%   # acc = 0.8
filter(! list %in% c(98, 99)) %>% # filter practice and filler items
mutate(skip = ifelse(total_duration==0, 1, 0),
FPReg = ifelse(gaze_duration==0, NA, FPReg),
FPFix = ifelse(gaze_duration==0, NA, FPFix)) %>%
filter(skip == 0) %>%
gather(measure, value, 18:26) %>%
mutate(tgt_zero = if_else(measure %in% c("first_duration", "gaze_duration", "go_past_time", "right_bounded_rt", "total_duration") & value == 0, F, T)) %>%
filter(tgt_zero != F) %>%
dplyr::select(-tgt_zero, -cond_id, -skip, -word_len) %>%
mutate(item_id = as.factor(item_id),
subj_id = as.factor(subj_id)) %>%
spread(measure, value) %>%
# Note: we commented these lines out when running models because we logged the data and used mix effects to account for the variances and noises. If also filter outliers when running models, the results will not change qualitatively, but the estimated CI (or CrI) will be a bit narrower.
# We filter outliers only for aesthetic reasons in plotting.
gather(measure, value, c("first_duration", "gaze_duration", "go_past_time", "right_bounded_rt", "total_duration")) %>%
mutate(outlier = value > (mean(value, na.rm = TRUE) + 3 * sd(value, na.rm = TRUE))) %>%
filter(outlier == FALSE) %>%
dplyr::select(-outlier) %>%
spread(measure, value) %>%
dplyr::select(-list, -part, -type_id, -orig_item_number, -case, -animacy, -response_true, -response_chosen) %>%
mutate(word = str_replace_all(word, "\\.", "")) %>%
rowwise() %>%
mutate(log_freq = ifelse(word %in% et_raw$IA_LABEL,
et_raw$lg_frequency[match(word, et_raw$IA_LABEL)],
NA_real_)) %>%
ungroup()
View(motr)
write.csv(et_acc_summary, "./stats/et_correctness_summary.csv", row.names = FALSE)
et_acc <- et %>% dplyr::select(all_of(c("item_id", "subj_id", "ACCURACY"))) %>%
filter(ACCURACY != -1) %>%
distinct() %>%
mutate(correctness = as.numeric(unlist(ACCURACY)))
et_acc_summary <- et_acc %>%
group_by(subj_id) %>%
summarise(mean_correctness = mean(correctness),
sd_correctness = sd(correctness),
count = n())
write.csv(et_acc_summary, "./stats/et_correctness_summary.csv", row.names = FALSE)
motr_acc <- motr %>% dplyr::select(item_id, subj_id, correctness) %>%
filter(correctness != 99) %>%
distinct()
motr_acc_summary <- motr_acc %>%
group_by(subj_id) %>%
summarise(mean_correctness = mean(correctness),
sd_correctness = sd(correctness),
count = n())
write.csv(motr_acc_summary, "./stats/motr_correctness_summary.csv", row.names = FALSE)
motr_acc_cond <- motr_acc %>%
group_by(item_id) %>%
summarise(
mean_correctness = round(mean(correctness), 2),
sd_correctness = round(sd(correctness), 2),
count = n()
)
motr_acc_cond
et_acc_cond <- et_acc %>%
group_by(item_id) %>%
summarise(
mean_correctness = round(mean(correctness), 2),
sd_correctness = round(sd(correctness), 2),
count = n()
)
et_acc_cond
motr_acc_cond <- motr_acc %>%
group_by(item_id) %>%
summarise(
mean_correctness = round(mean(correctness), 2),
sd_correctness = round(sd(correctness), 2),
count = n()
)
motr_acc_cond
et_acc_cond <- et_acc %>%
group_by(item_id) %>%
summarise(
mean_correctness = round(mean(correctness), 2),
sd_correctness = round(sd(correctness), 2),
count = n()
)
et_acc_cond
# check conditions
et$gender_match <- factor(et$gender_match)
levels(et$gender_match)
levels(et$type)
levels(factor(et$type))
# check conditions
et <- et %>% mutate(
gender_match = factor(gender_match, levels=c("Match", "Mis")),
target_gender = factor(target_gender, levels=c("F", "M")),
type = factor(type, levels=c("stim_adj", "stim_pred_adj", "stim_verb"))
)
motr <- motr %>% mutate(
gender_match = factor(gender_match, levels=c("Match", "Mis")),
target_gender = factor(target_gender, levels=c("F", "M")),
type = factor(type, levels=c("stim_adj", "stim_pred_adj", "stim_verb"))
)
levels(motr$gender_match)
# check conditions
et <- et %>% mutate(
gender_match = factor(gender_match, levels=c("Match", "Mis")),
target_gender = factor(target_gender, levels=c("F", "M")),
type = factor(type, levels=c("stim_adj", "stim_pred_adj", "stim_verb"))
)
motr <- motr %>% mutate(
gender_match = factor(gender_match, levels=c("Match", "Mis")),
target_gender = factor(target_gender, levels=c("F", "M")),
type = factor(type, levels=c("stim_adj", "stim_pred_adj", "stim_verb"))
)
levels(motr$gender_match)
levels(motr$target_gender)
levels(motr$type)
# check conditions
et <- et %>% mutate(
gender_match = factor(gender_match, levels=c("Match", "Mis")),
target_gender = factor(target_gender, levels=c("F", "M")),
type = factor(type, levels=c("stim_adj", "stim_pred_adj", "stim_verb"), labels=c("adj", "pred_adj", "verb"))
)
motr <- motr %>% mutate(
gender_match = factor(gender_match, levels=c("Match", "Mis")),
target_gender = factor(target_gender, levels=c("F", "M")),
type = factor(type, levels=c("stim_adj", "stim_pred_adj", "stim_verb"), labels=c("adj", "pred_adj", "verb"))
)
levels(motr$gender_match)
levels(motr$target_gender)
levels(motr$type)
knitr::opts_chunk$set(echo = TRUE)
shhh <- suppressPackageStartupMessages
shhh(library(dplyr))
shhh(library(afex))
shhh(library(ggplot2))
shhh(library(lme4))
shhh(library(lmerTest))
shhh(library(tidyverse))
shhh(library(gridExtra))
shhh(library(brms))
shhh(library(bayesplot))
shhh(library(MASS))
shhh(library(designr))
contr_motr <- read_csv("./stats/motr_reading_measures_contrast_coded.csv", show_col_types = FALSE) %>%
filter(AOI_id == "R3") %>%
mutate(subj_id = as.character(subj_id),
item_id = as.character(item_id),
theoryS = if_else(type == "stim_adj", "internal", "external"),
theoryL = if_else(type == "stim_verb", "verb", "adj")) %>%
dplyr::select(item_id, word_nr, word, AOI_id, subj_id, type, target_gender, gender_match, cond, Gram, Gen, Synt, Lex, Gram_x_Gen, Gen_x_Synt, Gen_x_Lex, Gram_x_Synt, Gram_x_Lex, Gram_x_Gen_x_Synt, Gram_x_Gen_x_Lex, gaze_duration, go_past_time, total_duration, FPReg, RegIn_incl, theoryS, theoryL )
contr_et <- read_csv("./stats/et_reading_measures_contrast_coded.csv", show_col_types = FALSE) %>%
filter(AOI_id == "R3") %>%
mutate(subj_id = as.character(subj_id),
item_id = as.character(item_id),
theoryS = if_else(type == "stim_adj", "internal", "external"),
theoryL = if_else(type == "stim_verb", "verb", "adj"))
# View(contr_motr)
# View(contr_et)
# Initialize prep_stats dataframe for storing eff size, variance terms from fitted models and some variables
prep_stats <- data.frame()
fixeff_names <- c("b_0", "b_Gram", "b_Gen", "b_Synt", "b_Lex",
"b_Gram_x_Synt", "b_Gram_x_Lex", "b_Gram_x_Gen_x_Synt", "b_Gram_x_Gen_x_Lex")
raneff_names <- c("sj_0", "sj_Gram", "sj_Gen", "sj_Synt", "sj_Lex",
"sj_Gram_x_Synt", "sj_Gram_x_Lex", "sj_Gram_x_Gen_x_Synt", "sj_Gram_x_Gen_x_Lex",
"it_0", "it_Gram", "it_Gen")
residual_name <- c("residual")
cor_subj_name <- c(
"L_u[2,1]", "L_u[3,1]", "L_u[3,2]", "L_u[4,1]", "L_u[4,2]", "L_u[4,3]",
"L_u[5,1]", "L_u[5,2]", "L_u[5,3]", "L_u[5,4]", "L_u[6,1]", "L_u[6,2]",
"L_u[6,3]", "L_u[6,4]", "L_u[6,5]", "L_u[7,1]", "L_u[7,2]", "L_u[7,3]",
"L_u[7,4]", "L_u[7,5]", "L_u[7,6]", "L_u[8,1]", "L_u[8,2]", "L_u[8,3]",
"L_u[8,4]", "L_u[8,5]", "L_u[8,6]", "L_u[8,7]", "L_u[9,1]", "L_u[9,2]",
"L_u[9,3]", "L_u[9,4]", "L_u[9,5]", "L_u[9,6]", "L_u[9,7]", "L_u[9,8]"
)
cor_item_name <- c("L_w[2,1]", "L_w[3,1]", "L_w[3,2]")
